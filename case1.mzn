I = 5;
J = 10;
C = 3141;
CV = 2;
CC = 5;
O_i = [50, 65, 38, 35, 29];
V_i = [0, 1, 1, 1, 1];
D_ij = 
[|358.399365145258, 352.52414040239756, 364.2095006710657, 366.1445808418567, 416.27846833590405, 406.2754005162926, 375.9406114702419, 407.8896703326524, 412.8396300832575, 413.18644299731676
|256.3475458093289, 272.8154952331733, 235.33405813894984, 235.313567415667, 182.57785567943537, 195.54910695036057, 226.41064647478504, 218.8610594549094, 205.38973322305637, 191.4252001451902
|263.66627574973, 285.19259866172035, 180.80985351793447, 222.13283770134785, 200.24740413611383, 226.20275237245536, 163.67367642453084, 284.39174426528103, 269.8959710850416, 237.83380262164772
|95.47609336344753, 72.47878291585712, 178.23600061697658, 138.71983291219124, 185.64420363122028, 155.2373581155108, 197.68233073627238, 104.22339474722631, 121.07978566072454, 149.7958470982254
|228.3684951662151, 251.49842877668448, 160.1793994309, 188.00301103086576, 134.53637683329922, 164.90918454833215, 141.16647667820538, 221.29130616597942, 203.62822856168233, 171.39347316990415
|];
E_ij = 
[|587.5990477178871, 578.7862106035964, 596.3142510065986, 599.216871262785, 674.417702503856, 659.4131007744389, 613.9109172053628, 661.8345054989786, 669.2594451248863, 669.7796644959751
|449.5213187139933, 474.2232428497599, 418.0010872084248, 417.9703511235005, 338.86678351915305, 358.3236604255409, 404.61596971217756, 393.2915891823641, 373.08459983458454, 352.1378002177853
|433.49941362459504, 465.78889799258053, 309.2147802769017, 371.1992565520218, 338.37110620417076, 377.30412855868303, 283.51051463679624, 464.5876163979216, 442.8439566275624, 394.7507039324716
|178.2141400451713, 143.7181743737857, 302.3540009254649, 243.07974936828685, 313.4663054468304, 267.8560371732662, 331.52349610440854, 191.33509212083948, 216.6196784910868, 259.6937706473381
|371.55274274932265, 406.2476431650267, 269.26909914634996, 311.00451654629865, 230.80456524994884, 276.3637768224982, 240.74971501730806, 360.9369592489691, 334.4423428425235, 286.09020975485623
|];

% Define sets I and J
int: I;
int: J;

int: C; % Cost of installing a warehouse in all zones
int: CV; % Capacity in green zone
int: CC; % Capacity in blue zone

array[1..I] of int: O_i; % Emissions per operation for each warehouse i
array[1..I, 1..J] of float: D_ij; % Distance between warehouse i and store j
array[1..I, 1..J] of float: E_ij; % Transportation emissions
array[1..I] of int: V_i; % 1 if warehouse i is in the green zone, 0 if in the blue zone

% Define decision variables
array[1..I, 1..J] of var 0..1: X; % 1 if warehouse i supplies store j, 0 otherwise
array[1..I] of var 0..1: Y;

% Define constraints

% Add the constraint to ensure Y_i is 1 if the warehouse I supplies at least one store
constraint forall(i in 1..I)(
  sum(j in 1..J)(X[i,j]) > 0 -> Y[i] == 1
);

% Emissions constraint
constraint sum(i in 1..I, j in 1..J)(E_ij[i, j] * X[i, j]) + sum(i in 1..I)(O_i[i] * Y[i]) <= 500 * J;

% Assignment constraint
constraint forall(j in 1..J)(sum(i in 1..I)(X[i, j]) == 1);

% Green zone capacity constraint
constraint forall(i in 1..I)(sum(j in 1..J)(X[i, j] * V_i[i]) <= CV);

% Blue zone capacity constraint
constraint forall(i in 1..I)(sum(j in 1..J)(X[i, j] * (1 - V_i[i])) <= CC);

% Solve the optimization problem using a solver
% Define the objective function
solve minimize sum(i in 1..I, j in 1..J)(1.25 * D_ij[i, j] * X[i, j]) + sum(i in 1..I)(C * Y[i]);

output ["Solution:", ""];
output ["X = \n", show2d(X), ";"];
output ["\n"];
output ["Y = ", show(Y), ";"];
output ["\n"];
output ["FO = ", show(sum(i in 1..I, j in 1..J)(1.25 * D_ij[i, j] * X[i, j]) + sum(i in 1..I)(C * Y[i])), "\n"];