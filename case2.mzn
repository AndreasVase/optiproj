I = 12;
J = 19;
C = 2110;
CV = 3;
CC = 6;
O_i = [24, 68, 34, 33, 37, 27, 35, 32, 28, 36, 35, 55];
V_i = [0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1];
D_ij = 
[|278, 212, 187, 205, 207, 242, 289, 209, 264, 178, 251, 158, 238, 278, 250, 177, 284, 286, 206
|247, 203, 196, 199, 217, 230, 268, 202, 232, 167, 249, 171, 239, 279, 226, 173, 273, 253, 192
|133, 205, 240, 213, 228, 177, 127, 209, 148, 235, 181, 265, 194, 172, 162, 238, 145, 126, 207
|252, 201, 176, 198, 164, 203, 228, 198, 254, 218, 177, 189, 172, 164, 231, 207, 199, 259, 214
|192, 225, 245, 231, 225, 198, 163, 227, 206, 262, 182, 273, 194, 154, 204, 259, 154, 190, 235
|208, 138, 102, 132, 99, 153, 194, 134, 203, 142, 136, 105, 125, 141, 180, 130, 170, 216, 148
|230, 220, 232, 219, 249, 237, 259, 221, 215, 191, 263, 217, 258, 293, 221, 202, 274, 232, 206
|294, 280, 275, 281, 255, 266, 262, 279, 303, 311, 239, 298, 243, 210, 288, 302, 237, 297, 294
|295, 322, 347, 325, 358, 327, 327, 325, 286, 305, 355, 340, 355, 381, 302, 317, 352, 293, 308
|283, 280, 281, 282, 260, 262, 251, 280, 293, 314, 236, 306, 243, 206, 281, 306, 228, 285, 294
|239, 311, 346, 318, 332, 282, 232, 314, 253, 341, 285, 370, 298, 272, 268, 344, 248, 231, 313
|169, 246, 285, 254, 277, 222, 177, 251, 179, 268, 235, 305, 247, 235, 200, 275, 202, 160, 244
|];
E_ij = 
[|441, 342, 305, 332, 334, 387, 458, 338, 420, 291, 400, 262, 381, 441, 399, 290, 450, 453, 334
|439, 373, 362, 367, 393, 413, 470, 372, 416, 318, 441, 325, 426, 487, 408, 327, 478, 448, 357
|234, 342, 395, 353, 376, 299, 225, 347, 256, 386, 306, 431, 326, 293, 277, 391, 251, 223, 344
|412, 335, 298, 330, 279, 338, 376, 330, 414, 361, 299, 317, 292, 279, 380, 343, 332, 422, 355
|325, 375, 404, 383, 375, 334, 282, 378, 346, 431, 310, 447, 328, 268, 343, 426, 269, 322, 390
|339, 234, 181, 225, 176, 256, 318, 228, 332, 240, 231, 184, 214, 238, 297, 222, 282, 352, 249
|380, 366, 383, 364, 408, 391, 423, 367, 358, 322, 430, 360, 422, 475, 367, 338, 446, 383, 344
|473, 453, 444, 454, 415, 431, 426, 451, 487, 499, 390, 479, 396, 347, 464, 485, 388, 478, 474
|471, 512, 549, 515, 566, 519, 519, 515, 457, 486, 561, 539, 561, 599, 482, 504, 556, 468, 491
|460, 457, 457, 460, 427, 429, 412, 456, 476, 507, 390, 495, 400, 345, 457, 495, 378, 463, 477
|393, 501, 554, 513, 534, 458, 384, 507, 415, 546, 463, 591, 482, 444, 437, 551, 407, 382, 504
|308, 425, 483, 436, 471, 389, 321, 431, 324, 458, 408, 512, 425, 407, 355, 467, 358, 295, 421
|];

% Define sets I and J
int: I;
int: J;

int: C; % Cost of installing a warehouse in all zones
int: CV; % Capacity in green zone
int: CC; % Capacity in blue zone

array[1..I] of int: O_i; % Emissions per operation for each warehouse i
array[1..I, 1..J] of int: D_ij; % Distance between warehouse i and store j
array[1..I, 1..J] of int: E_ij; % Transportation emissions
array[1..I] of int: V_i; % 1 if warehouse i is in the green zone, 0 if in the blue zone

% Define decision variables
array[1..I, 1..J] of var 0..1: X; % 1 if warehouse i supplies store j, 0 otherwise
array[1..I] of var 0..1: Y;

% Define constraints

% Add the constraint to ensure Y_i is 1 if the warehouse I supplies at least one store
constraint forall(i in 1..I)(
  sum(j in 1..J)(X[i,j]) > 0 -> Y[i] == 1
);

% Emissions constraint
constraint sum(i in 1..I, j in 1..J)(E_ij[i, j] * X[i, j]) + sum(i in 1..I)(O_i[i] * Y[i]) <= 500 * J;

% Assignment constraint
constraint forall(j in 1..J)(sum(i in 1..I)(X[i, j]) == 1);

% Green zone capacity constraint
constraint forall(i in 1..I)(sum(j in 1..J)(X[i, j] * V_i[i]) <= CV);

% Blue zone capacity constraint
constraint forall(i in 1..I)(sum(j in 1..J)(X[i, j] * (1 - V_i[i])) <= CC);

% Solve the optimization problem using a solver
% Define the objective function
solve minimize sum(i in 1..I, j in 1..J)(1.25 * D_ij[i, j] * X[i, j]) + sum(i in 1..I)(C * Y[i]);

output ["Solution:", ""];
output ["X = \n", show2d(X), ";"];
output ["\n"];
output ["Y = ", show(Y), ";"];
output ["\n"];
output ["FO = ", show(sum(i in 1..I, j in 1..J)(1.25 * D_ij[i, j] * X[i, j]) + sum(i in 1..I)(C * Y[i])), "\n"];