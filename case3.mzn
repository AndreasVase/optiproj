I = 14;
J = 25;
C = 3248;
CV = 6;
CC = 6;
O_i = [70, 40, 42, 70, 56, 40, 35, 38, 50, 26, 26, 52, 57, 48];
V_i = [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1];
D_ij = 
[|219, 215, 229, 229, 280, 269, 226, 232, 299, 296, 263, 280, 285, 298, 273, 313, 289, 334, 251, 284, 274, 244, 234, 226, 221
|227, 242, 240, 290, 261, 267, 224, 257, 283, 282, 254, 298, 307, 302, 301, 347, 307, 342, 277, 272, 289, 279, 260, 242, 263
|239, 262, 250, 320, 236, 254, 228, 270, 254, 255, 241, 292, 302, 285, 302, 342, 299, 317, 284, 249, 284, 293, 273, 253, 288
|127, 151, 133, 207, 105, 126, 114, 153, 120, 122, 113, 164, 173, 153, 176, 212, 169, 183, 162, 118, 157, 173, 156, 138, 175
|227, 225, 238, 241, 287, 278, 234, 242, 307, 304, 272, 290, 296, 307, 284, 325, 300, 344, 262, 292, 284, 255, 244, 235, 232
|319, 304, 306, 263, 301, 286, 324, 289, 283, 282, 300, 251, 241, 253, 245, 200, 242, 220, 269, 288, 259, 267, 285, 304, 284
|388, 379, 375, 350, 354, 346, 390, 362, 333, 333, 358, 317, 308, 310, 316, 271, 307, 271, 341, 342, 324, 343, 359, 375, 364
|361, 350, 348, 318, 331, 321, 363, 334, 310, 310, 334, 290, 281, 286, 288, 242, 280, 247, 312, 318, 298, 314, 330, 347, 334
|352, 351, 340, 343, 301, 303, 349, 334, 279, 280, 312, 286, 280, 270, 292, 257, 276, 232, 315, 292, 292, 322, 332, 342, 345
|337, 319, 338, 287, 395, 374, 350, 328, 404, 401, 376, 361, 360, 385, 346, 363, 366, 406, 336, 392, 360, 323, 327, 334, 305
|301, 279, 298, 232, 350, 326, 314, 283, 354, 350, 332, 304, 301, 328, 288, 293, 307, 341, 285, 343, 305, 271, 281, 293, 259
|88, 70, 90, 66, 147, 128, 101, 83, 159, 156, 128, 125, 128, 147, 115, 151, 133, 178, 97, 145, 121, 87, 83, 85, 64
|149, 173, 158, 232, 138, 157, 137, 178, 155, 157, 144, 195, 205, 187, 207, 245, 202, 218, 190, 151, 188, 200, 182, 163, 198
|171, 147, 165, 92, 210, 186, 184, 147, 211, 208, 194, 160, 155, 183, 144, 148, 162, 195, 143, 202, 162, 130, 144, 160, 123
|];
E_ij = 
[|399, 393, 414, 413, 490, 474, 410, 418, 518, 514, 465, 490, 498, 517, 480, 539, 504, 571, 447, 496, 482, 436, 421, 410, 402
|380, 403, 401, 476, 431, 440, 376, 425, 464, 463, 422, 487, 500, 493, 491, 560, 501, 553, 456, 448, 474, 459, 431, 403, 435
|401, 435, 417, 523, 397, 423, 385, 447, 423, 424, 403, 480, 495, 469, 496, 556, 491, 517, 469, 416, 469, 481, 452, 422, 474
|261, 296, 270, 381, 228, 259, 241, 299, 251, 253, 240, 316, 330, 299, 334, 388, 324, 345, 314, 247, 305, 330, 304, 278, 333
|397, 394, 413, 418, 487, 473, 408, 420, 516, 512, 464, 492, 500, 517, 483, 543, 506, 572, 449, 495, 483, 439, 423, 409, 405
|519, 497, 499, 435, 492, 470, 526, 474, 465, 463, 490, 416, 402, 420, 408, 340, 403, 370, 443, 472, 429, 440, 468, 496, 467
|618, 603, 598, 560, 566, 554, 620, 578, 534, 534, 573, 510, 497, 501, 510, 442, 495, 442, 546, 548, 522, 549, 573, 597, 581
|580, 564, 560, 516, 534, 520, 583, 539, 503, 503, 539, 473, 459, 467, 470, 402, 458, 409, 507, 516, 485, 509, 534, 559, 539
|578, 577, 560, 565, 502, 504, 573, 551, 469, 471, 518, 479, 471, 455, 489, 436, 465, 398, 522, 488, 488, 533, 548, 563, 568
|531, 504, 534, 456, 618, 587, 551, 518, 633, 627, 590, 567, 566, 603, 546, 571, 575, 635, 530, 614, 566, 511, 517, 527, 484
|478, 444, 474, 374, 551, 515, 498, 451, 557, 552, 524, 482, 477, 518, 459, 466, 487, 537, 453, 541, 484, 433, 448, 466, 414
|184, 158, 187, 152, 272, 244, 203, 176, 291, 286, 244, 240, 245, 272, 225, 279, 252, 320, 197, 270, 234, 182, 176, 180, 148
|281, 317, 294, 405, 265, 293, 263, 324, 290, 292, 273, 350, 365, 337, 367, 425, 360, 385, 343, 284, 339, 357, 330, 301, 355
|305, 269, 295, 186, 363, 327, 324, 268, 365, 360, 339, 288, 281, 323, 264, 270, 291, 340, 263, 351, 291, 244, 264, 288, 233
|];

% Define sets I and J
int: I;
int: J;

int: C; % Cost of installing a warehouse in all zones
int: CV; % Capacity in green zone
int: CC; % Capacity in blue zone

array[1..I] of int: O_i; % Emissions per operation for each warehouse i
array[1..I, 1..J] of int: D_ij; % Distance between warehouse i and store j
array[1..I, 1..J] of int: E_ij; % Transportation emissions
array[1..I] of int: V_i; % 1 if warehouse i is in the green zone, 0 if in the blue zone

% Define decision variables
array[1..I, 1..J] of var 0..1: X; % 1 if warehouse i supplies store j, 0 otherwise
array[1..I] of var 0..1: Y;

% Define constraints

% Add the constraint to ensure Y_i is 1 if the warehouse I supplies at least one store
constraint forall(i in 1..I)(
  sum(j in 1..J)(X[i,j]) > 0 -> Y[i] == 1
);

% Emissions constraint
constraint sum(i in 1..I, j in 1..J)(E_ij[i, j] * X[i, j]) + sum(i in 1..I)(O_i[i] * Y[i]) <= 500 * J;

% Assignment constraint
constraint forall(j in 1..J)(sum(i in 1..I)(X[i, j]) == 1);

% Green zone capacity constraint
constraint forall(i in 1..I)(sum(j in 1..J)(X[i, j] * V_i[i]) <= CV);

% Blue zone capacity constraint
constraint forall(i in 1..I)(sum(j in 1..J)(X[i, j] * (1 - V_i[i])) <= CC);

% Solve the optimization problem using a solver
% Define the objective function
solve minimize sum(i in 1..I, j in 1..J)(1.25 * D_ij[i, j] * X[i, j]) + sum(i in 1..I)(C * Y[i]);

output ["Solution:", ""];
output ["X = \n", show2d(X), ";"];
output ["\n"];
output ["Y = ", show(Y), ";"];
output ["\n"];
output ["FO = ", show(sum(i in 1..I, j in 1..J)(1.25 * D_ij[i, j] * X[i, j]) + sum(i in 1..I)(C * Y[i])), "\n"];