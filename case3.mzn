I = 16;
J = 28;
C = 3213;
CV = 3;
CC = 12;
O_i = [55, 34, 65, 25, 42, 67, 57, 65, 30, 68, 20, 51, 41, 38, 46, 42];
V_i = [1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1];
D_ij = 
[|149, 202, 110, 167, 115, 169, 171, 214, 171, 173, 125, 198, 217, 182, 182, 172, 167, 118, 162, 132, 235, 181, 232, 126, 165, 183, 136, 233
|162, 217, 135, 175, 138, 177, 196, 227, 194, 178, 141, 216, 233, 199, 204, 198, 187, 130, 174, 152, 254, 206, 251, 137, 185, 191, 158, 248
|193, 142, 203, 203, 199, 207, 143, 154, 143, 218, 202, 131, 134, 149, 132, 146, 152, 221, 186, 185, 98, 133, 100, 216, 153, 199, 178, 127
|293, 350, 276, 298, 278, 298, 338, 355, 334, 295, 277, 352, 364, 334, 344, 340, 325, 261, 304, 292, 390, 347, 386, 268, 324, 312, 298, 379
|343, 397, 304, 356, 310, 357, 363, 408, 365, 358, 320, 394, 413, 378, 378, 362, 363, 311, 355, 328, 432, 374, 428, 318, 361, 372, 331, 428
|241, 260, 304, 213, 296, 208, 330, 239, 313, 194, 260, 280, 261, 269, 307, 342, 288, 241, 238, 285, 297, 332, 296, 238, 287, 207, 297, 263
|127, 172, 70, 151, 76, 155, 127, 189, 129, 162, 99, 164, 188, 150, 143, 126, 131, 102, 139, 97, 200, 137, 196, 108, 129, 167, 97, 203
|302, 265, 369, 279, 360, 276, 346, 243, 331, 272, 330, 281, 252, 289, 317, 359, 313, 329, 290, 339, 263, 340, 265, 321, 314, 262, 345, 239
|166, 149, 238, 138, 228, 133, 234, 124, 217, 126, 193, 170, 142, 169, 205, 247, 193, 186, 155, 209, 171, 231, 171, 179, 194, 122, 218, 136
|93, 149, 86, 104, 84, 106, 144, 156, 137, 108, 75, 150, 163, 132, 144, 150, 124, 60, 104, 92, 188, 152, 184, 67, 123, 120, 102, 178
|170, 222, 128, 188, 133, 190, 188, 235, 189, 194, 145, 218, 238, 202, 201, 188, 186, 139, 183, 151, 255, 199, 252, 147, 185, 204, 154, 253
|325, 332, 258, 355, 266, 360, 247, 357, 264, 373, 303, 312, 341, 312, 276, 233, 288, 321, 332, 280, 322, 250, 320, 324, 288, 367, 268, 350
|244, 189, 290, 236, 283, 236, 245, 180, 235, 240, 266, 195, 174, 210, 220, 253, 228, 276, 232, 262, 160, 236, 164, 269, 230, 222, 263, 158
|197, 214, 262, 168, 254, 163, 285, 193, 268, 149, 217, 233, 215, 224, 262, 298, 242, 199, 193, 241, 251, 286, 250, 196, 242, 161, 254, 217
|177, 189, 109, 207, 117, 212, 105, 214, 121, 225, 154, 171, 200, 168, 135, 93, 143, 173, 184, 131, 189, 111, 187, 176, 142, 219, 120, 212
|214, 228, 280, 185, 272, 179, 301, 206, 284, 166, 235, 248, 228, 239, 277, 314, 258, 217, 209, 259, 264, 302, 263, 214, 258, 177, 271, 229
|];
E_ij = 
[|279, 358, 220, 305, 227, 309, 312, 377, 311, 315, 242, 352, 381, 328, 329, 313, 306, 233, 298, 253, 408, 327, 403, 244, 303, 330, 259, 405
|278, 360, 236, 297, 241, 300, 329, 375, 325, 302, 246, 358, 383, 333, 341, 332, 315, 229, 296, 263, 415, 343, 410, 240, 312, 321, 271, 406
|354, 279, 370, 370, 364, 375, 280, 297, 279, 392, 368, 262, 266, 288, 264, 284, 293, 397, 344, 342, 212, 265, 215, 389, 295, 363, 333, 256
|465, 550, 439, 473, 442, 473, 532, 557, 527, 468, 440, 553, 571, 526, 541, 535, 513, 417, 481, 463, 610, 546, 605, 427, 511, 494, 473, 593
|557, 638, 499, 576, 507, 578, 587, 654, 590, 579, 523, 634, 661, 609, 609, 585, 587, 509, 575, 534, 690, 603, 684, 520, 584, 600, 539, 685
|429, 457, 524, 387, 512, 379, 562, 426, 537, 358, 457, 487, 459, 471, 528, 581, 499, 428, 424, 494, 513, 565, 512, 424, 498, 378, 513, 462
|247, 316, 162, 283, 172, 289, 248, 341, 251, 300, 205, 304, 339, 282, 271, 246, 254, 210, 266, 202, 357, 263, 352, 220, 251, 308, 203, 362
|518, 463, 619, 484, 606, 479, 585, 430, 562, 473, 561, 487, 444, 498, 540, 603, 535, 558, 500, 574, 460, 575, 463, 547, 537, 459, 583, 424
|279, 254, 387, 237, 373, 230, 381, 216, 356, 219, 320, 285, 244, 283, 338, 401, 320, 309, 263, 344, 286, 377, 287, 299, 321, 213, 358, 235
|207, 291, 197, 224, 195, 227, 284, 303, 274, 230, 180, 293, 313, 266, 285, 293, 255, 158, 224, 207, 350, 297, 345, 169, 252, 248, 221, 336
|275, 354, 212, 302, 220, 306, 303, 373, 304, 311, 238, 347, 377, 323, 322, 302, 300, 229, 294, 247, 403, 318, 398, 240, 297, 326, 252, 400
|539, 549, 438, 584, 450, 592, 421, 587, 447, 611, 505, 519, 562, 519, 465, 401, 483, 533, 550, 471, 534, 426, 531, 537, 483, 601, 453, 577
|407, 325, 476, 395, 465, 395, 408, 311, 394, 402, 441, 333, 302, 356, 371, 421, 383, 456, 389, 435, 282, 395, 287, 445, 386, 375, 435, 279
|334, 359, 432, 291, 420, 283, 466, 327, 441, 262, 364, 388, 361, 374, 431, 485, 402, 337, 327, 400, 415, 468, 413, 332, 401, 280, 419, 363
|311, 330, 210, 357, 222, 365, 204, 368, 228, 384, 277, 303, 347, 298, 249, 185, 261, 306, 323, 243, 330, 213, 326, 310, 260, 375, 226, 365
|363, 384, 463, 319, 450, 311, 494, 351, 469, 291, 395, 414, 384, 400, 458, 513, 430, 368, 356, 430, 438, 495, 436, 363, 429, 307, 449, 386
|];

% Define sets I and J
int: I;
int: J;

int: C; % Cost of installing a warehouse in all zones
int: CV; % Capacity in green zone
int: CC; % Capacity in blue zone

array[1..I] of int: O_i; % Emissions per operation for each warehouse i
array[1..I, 1..J] of int: D_ij; % Distance between warehouse i and store j
array[1..I, 1..J] of int: E_ij; % Transportation emissions
array[1..I] of int: V_i; % 1 if warehouse i is in the green zone, 0 if in the blue zone

% Define decision variables
array[1..I, 1..J] of var 0..1: X; % 1 if warehouse i supplies store j, 0 otherwise
array[1..I] of var 0..1: Y;

% Define constraints

% Add the constraint to ensure Y_i is 1 if the warehouse I supplies at least one store
constraint forall(i in 1..I)(
  sum(j in 1..J)(X[i,j]) > 0 -> Y[i] == 1
);

% Emissions constraint
constraint sum(i in 1..I, j in 1..J)(E_ij[i, j] * X[i, j]) + sum(i in 1..I)(O_i[i] * Y[i]) <= 500 * J;

% Assignment constraint
constraint forall(j in 1..J)(sum(i in 1..I)(X[i, j]) == 1);

% Green zone capacity constraint
constraint forall(i in 1..I)(sum(j in 1..J)(X[i, j] * V_i[i]) <= CV);

% Blue zone capacity constraint
constraint forall(i in 1..I)(sum(j in 1..J)(X[i, j] * (1 - V_i[i])) <= CC);

% Solve the optimization problem using a solver
% Define the objective function
solve minimize sum(i in 1..I, j in 1..J)(1.25 * D_ij[i, j] * X[i, j]) + sum(i in 1..I)(C * Y[i]);

output ["Solution:", ""];
output ["X = \n", show2d(X), ";"];
output ["\n"];
output ["Y = ", show(Y), ";"];
output ["\n"];
output ["FO = ", show(sum(i in 1..I, j in 1..J)(1.25 * D_ij[i, j] * X[i, j]) + sum(i in 1..I)(C * Y[i])), "\n"];