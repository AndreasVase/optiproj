I = 18;
J = 26;
C = 3447;
CV = 2;
CC = 8;
O_i = [25, 47, 52, 50, 67, 52, 67, 46, 23, 34, 64, 57, 57, 62, 28, 55, 47, 66];
V_i = [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0];
D_ij = 
[|138, 182, 134, 226, 143, 107, 119, 189, 175, 120, 160, 234, 212, 198, 123, 125, 177, 178, 232, 153, 159, 154, 170, 175, 187, 200
|320, 262, 300, 274, 307, 319, 315, 271, 258, 328, 267, 257, 216, 227, 338, 339, 245, 315, 260, 274, 265, 265, 248, 251, 247, 221
|170, 215, 203, 190, 183, 208, 198, 200, 228, 177, 230, 207, 263, 260, 161, 158, 256, 154, 203, 227, 240, 254, 264, 243, 235, 275
|187, 171, 154, 235, 178, 144, 156, 191, 154, 176, 140, 230, 154, 141, 191, 195, 126, 222, 230, 139, 129, 111, 111, 139, 157, 127
|226, 240, 202, 301, 223, 178, 194, 256, 225, 208, 207, 302, 243, 227, 220, 224, 206, 269, 301, 202, 199, 183, 192, 214, 233, 218
|211, 266, 239, 259, 224, 233, 229, 256, 274, 210, 271, 275, 315, 308, 196, 193, 297, 212, 272, 266, 278, 288, 302, 286, 284, 320
|176, 120, 167, 113, 165, 192, 182, 121, 124, 189, 140, 97, 90, 105, 195, 195, 128, 160, 100, 146, 143, 153, 140, 126, 112, 111
|41, 98, 60, 126, 52, 54, 48, 96, 100, 31, 93, 136, 142, 132, 22, 23, 119, 74, 134, 88, 99, 108, 122, 109, 111, 142
|285, 324, 319, 285, 297, 326, 315, 306, 339, 294, 344, 301, 370, 369, 278, 275, 368, 262, 298, 341, 353, 369, 378, 354, 344, 385
|123, 99, 90, 163, 112, 89, 96, 119, 82, 116, 69, 158, 84, 70, 132, 135, 53, 153, 158, 69, 58, 41, 38, 66, 84, 58
|280, 297, 312, 241, 288, 328, 314, 277, 315, 296, 326, 252, 334, 339, 282, 278, 345, 243, 251, 326, 337, 354, 358, 331, 315, 356
|309, 361, 340, 340, 323, 337, 331, 347, 371, 311, 371, 357, 409, 405, 296, 294, 397, 301, 354, 367, 379, 390, 403, 385, 379, 418
|208, 170, 216, 120, 203, 243, 229, 158, 183, 226, 201, 111, 167, 181, 225, 224, 201, 173, 113, 207, 208, 224, 216, 193, 174, 194
|176, 175, 201, 112, 179, 224, 208, 155, 192, 195, 207, 121, 204, 211, 185, 182, 221, 133, 120, 208, 217, 235, 236, 208, 190, 228
|210, 207, 235, 144, 213, 257, 241, 187, 225, 228, 239, 151, 234, 242, 218, 215, 254, 167, 150, 242, 250, 268, 268, 240, 222, 259
|275, 307, 261, 361, 277, 234, 250, 319, 296, 256, 278, 367, 324, 308, 263, 266, 286, 317, 365, 272, 273, 261, 274, 290, 306, 303
|93, 151, 115, 166, 106, 106, 103, 146, 155, 86, 149, 180, 197, 188, 75, 74, 174, 113, 177, 143, 154, 162, 177, 165, 166, 198
|323, 273, 294, 311, 310, 303, 305, 289, 261, 323, 262, 296, 225, 228, 337, 340, 236, 335, 299, 267, 255, 246, 232, 248, 254, 214
|];
E_ij = 
[|232, 298, 226, 365, 240, 186, 204, 308, 288, 205, 265, 377, 344, 322, 210, 213, 290, 292, 374, 255, 263, 256, 281, 288, 305, 325
|528, 441, 498, 458, 508, 526, 519, 453, 434, 539, 448, 432, 371, 388, 554, 556, 414, 519, 437, 458, 444, 444, 420, 424, 418, 378
|307, 375, 357, 337, 326, 364, 349, 352, 394, 318, 398, 362, 447, 443, 294, 289, 436, 283, 357, 393, 412, 433, 448, 416, 404, 465
|331, 307, 281, 403, 317, 266, 284, 337, 281, 314, 260, 395, 281, 262, 337, 343, 239, 383, 396, 258, 244, 217, 216, 258, 285, 240
|406, 427, 370, 519, 402, 334, 359, 451, 404, 380, 377, 521, 431, 408, 398, 403, 376, 470, 519, 371, 365, 341, 355, 389, 416, 395
|369, 452, 411, 440, 389, 402, 395, 436, 464, 367, 459, 465, 524, 514, 346, 342, 498, 370, 460, 452, 470, 484, 505, 482, 478, 532
|331, 247, 318, 237, 315, 355, 340, 249, 253, 350, 277, 212, 202, 225, 359, 360, 259, 307, 217, 287, 281, 296, 277, 256, 236, 234
|108, 193, 136, 235, 124, 127, 119, 191, 197, 93, 186, 251, 260, 245, 80, 80, 224, 157, 247, 178, 195, 208, 229, 210, 213, 260
|451, 509, 502, 450, 469, 512, 495, 483, 531, 464, 539, 474, 578, 577, 441, 436, 575, 416, 470, 535, 553, 576, 590, 554, 539, 601
|219, 183, 169, 278, 202, 168, 178, 213, 157, 208, 138, 271, 160, 140, 232, 237, 114, 264, 271, 138, 122, 95, 92, 134, 161, 121
|485, 510, 532, 425, 496, 557, 535, 480, 536, 508, 553, 443, 565, 572, 487, 482, 582, 429, 440, 554, 569, 596, 602, 561, 537, 598
|521, 598, 568, 567, 541, 563, 554, 578, 614, 524, 613, 592, 671, 664, 502, 498, 653, 509, 588, 607, 626, 643, 662, 634, 626, 685
|370, 312, 381, 238, 361, 422, 400, 295, 332, 396, 359, 224, 308, 329, 394, 393, 359, 317, 227, 367, 370, 393, 381, 346, 319, 348
|326, 324, 364, 230, 331, 398, 374, 294, 351, 354, 372, 244, 368, 379, 339, 335, 394, 262, 242, 375, 388, 415, 416, 374, 348, 404
|343, 339, 381, 244, 347, 414, 390, 309, 365, 370, 387, 255, 379, 391, 355, 351, 409, 278, 254, 391, 403, 430, 430, 388, 362, 417
|468, 516, 447, 597, 471, 407, 430, 534, 499, 440, 472, 605, 541, 518, 450, 454, 484, 531, 603, 463, 464, 447, 466, 490, 514, 510
|187, 274, 220, 297, 206, 206, 202, 267, 280, 177, 270, 317, 343, 329, 160, 158, 309, 216, 313, 262, 279, 290, 312, 294, 296, 344
|551, 475, 507, 532, 531, 521, 524, 499, 458, 551, 459, 510, 404, 408, 572, 576, 420, 568, 514, 466, 448, 435, 414, 438, 447, 387
|];

% Define sets I and J
int: I;
int: J;

int: C; % Cost of installing a warehouse in all zones
int: CV; % Capacity in green zone
int: CC; % Capacity in blue zone

array[1..I] of int: O_i; % Emissions per operation for each warehouse i
array[1..I, 1..J] of int: D_ij; % Distance between warehouse i and store j
array[1..I, 1..J] of int: E_ij; % Transportation emissions
array[1..I] of int: V_i; % 1 if warehouse i is in the green zone, 0 if in the blue zone

% Define decision variables
array[1..I, 1..J] of var 0..1: X; % 1 if warehouse i supplies store j, 0 otherwise
array[1..I] of var 0..1: Y;

% Define constraints

% Add the constraint to ensure Y_i is 1 if the warehouse I supplies at least one store
constraint forall(i in 1..I)(
  sum(j in 1..J)(X[i,j]) > 0 -> Y[i] == 1
);

% Emissions constraint
constraint sum(i in 1..I, j in 1..J)(E_ij[i, j] * X[i, j]) + sum(i in 1..I)(O_i[i] * Y[i]) <= 500 * J;

% Assignment constraint
constraint forall(j in 1..J)(sum(i in 1..I)(X[i, j]) == 1);

% Green zone capacity constraint
constraint forall(i in 1..I)(sum(j in 1..J)(X[i, j] * V_i[i]) <= CV);

% Blue zone capacity constraint
constraint forall(i in 1..I)(sum(j in 1..J)(X[i, j] * (1 - V_i[i])) <= CC);

% Solve the optimization problem using a solver
% Define the objective function
solve minimize sum(i in 1..I, j in 1..J)(1.25 * D_ij[i, j] * X[i, j]) + sum(i in 1..I)(C * Y[i]);

output ["Solution:", ""];
output ["X = \n", show2d(X), ";"];
output ["\n"];
output ["Y = ", show(Y), ";"];
output ["\n"];
output ["FO = ", show(sum(i in 1..I, j in 1..J)(1.25 * D_ij[i, j] * X[i, j]) + sum(i in 1..I)(C * Y[i])), "\n"];