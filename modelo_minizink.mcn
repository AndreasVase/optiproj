I = 5;
J = 10;
C = 1855;
CV = 2;
CC = 4;
Oi = [38, 28, 34, 23, 69]
Vi = [1, 1, 0, 1, 0]
Dij = 
[
|196.14922550071765, 169.6919986706644, 187.238800103337, 212.5570760579153, 141.71019129035605, 235.8469969453479, 201.326828302931, 187.57496751659326, 175.8448212342197, 208.01428525520436
|225.47684773003917, 173.53349929309542, 188.82798422774755, 147.0002490385732, 226.61810134967925, 176.75709042615128, 182.82614889563192, 191.10501432970597, 150.5056668895129, 170.6099115445696
|284.9135501107505, 335.51289845232674, 312.4080999984665, 331.8326200499188, 330.8498090920737, 297.5170362452036, 307.8365050423782, 310.6582927772908, 349.3940737344271, 313.7420582058906
|107.27697921733207, 89.7772840035606, 102.83440395390487, 138.32024781393318, 52.67438174484756, 154.73515787512557, 118.21213195217496, 102.71398185066671, 103.35796410032245, 127.6546013641549
|366.9430163698713, 339.1333617895872, 357.7543598825481, 378.49759389391556, 311.8902900113925, 404.6809418213028, 371.3456752698911, 358.20200107081473, 342.3446122293726, 376.91646110266294
];
Eij = 
[
|332.2238382510765, 292.5379980059966, 318.85820015500553, 356.83561408687297, 250.56528693553406, 391.7704954180219, 339.9902424543965, 319.3624512748899, 301.76723185132954, 350.0214278828065
|366.21527159505877, 288.3002489396431, 311.24197634162135, 248.5003735578598, 367.9271520245189, 293.1356356392269, 302.23922334344786, 314.657521494559, 253.75850033426934, 283.9148673168544
|461.3703251661258, 537.2693476784901, 502.6121499976998, 531.7489300748782, 530.2747136381106, 480.2755543678054, 495.7547575635673, 499.98743916593617, 558.0911106016406, 504.61308730883593
|183.91546882599812, 157.6659260053409, 177.2516059308573, 230.48037172089977, 102.01157261727134, 255.10273681268836, 200.31819792826244, 177.07097277600008, 178.0369461504837, 214.48190204623234
|619.414524554807, 577.7000426843808, 605.6315398238221, 636.7463908408733, 536.8354350170887, 676.0214127319541, 626.0185129048366, 606.3030016062221, 582.5169183440589, 634.3746916539944
];

% Define sets I and J
int: I;
int: J;

int: C; % Cost of installing a warehouse in all zones
int: CV; % Capacity in green zone
int: CC; % Capacity in blue zone

array[1..I] of int: O_i; % Emissions per operation for each warehouse i
array[1..I, 1..J] of float: D_ij; % Distance between warehouse i and store j
array[1..I, 1..J] of float: T_ij = [1.25 * D_ij[i, j] | i, j in 1..I, j in 1..J]; % Transportation cost
array[1..I, 1..J] of int: E_ij; % Transportation emissions
array[1..I] of int: V_i; % 1 if warehouse i is in the green zone, 0 if in the blue zone

% Define decision variables
array[1..I, 1..J] of var 0..1: X; % 1 if warehouse i supplies store j, 0 otherwise
array[1..I] of var 0..1: Y;

% Define constraints

% Add the constraint to ensure Y_i is 1 if the warehouse I supplies at least one store
constraint forall(i in 1..I)(
  sum(j in 1..J)(X[i,j]) > 0 -> Y[i] == 1
);

% Emissions constraint
constraint sum(i in 1..I, j in 1..J)(E_ij[i, j] * X[i, j]) + sum(i in 1..I)(O_i[i] * Y[i]) <= 500 * J;

% Assignment constraint
constraint forall(j in 1..J)(sum(i in 1..I)(X[i, j]) == 1);

% Green zone capacity constraint
constraint forall(i in 1..I)(sum(j in 1..J)(X[i, j] * V_i[i]) <= CV);

% Blue zone capacity constraint
constraint forall(i in 1..I)(sum(j in 1..J)(X[i, j] * (1 - V_i[i])) <= CC);

% Solve the optimization problem using a solver
% Define the objective function
solve minimize sum(i in 1..I, j in 1..J)(1.25 * D_ij[i, j] * X[i, j]) + sum(i in 1..I)(C * Y[i]);
output ["Solution:", "
"];
output ["X = ", show2d(X), ";
"];
output ["Y = ", show(Y), ";
"];
